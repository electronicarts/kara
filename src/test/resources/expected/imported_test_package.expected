/*
 * Copyright (C) 2020 Electronic Arts Inc.  All rights reserved.
 */

// This file is autogenerated by kara. Do not edit.

package com.ea.kara.generated

// TODO: These wildcard imports are a source of trouble: get rid of them.

// Java
import java.nio.ByteBuffer
import java.nio.charset.StandardCharsets
import java.util.Base64

// Cats
import cats.syntax.either._

// Circe
import io.circe._, io.circe.parser._, io.circe.generic.auto._, io.circe.syntax._

// Scrooge
import com.twitter.scrooge._

// Apache Thrift
import org.apache.thrift.protocol._

// ThriftStruct <-> JSON conversions
import com.ea.kara.generated.test._
package object imported_test {
  // #######ByteBuffer#######

  private implicit def encodeByteBuffer: Encoder[ByteBuffer] =
    Encoder.instance(buffer => new String(Base64.getEncoder.encode(buffer).array(), StandardCharsets.UTF_8).asJson)

  private implicit def decodeByteBuffer: Decoder[ByteBuffer] =
    Decoder.decodeString.emap { str =>
      Either.catchNonFatal(ByteBuffer.wrap(Base64.getDecoder.decode(str.getBytes(StandardCharsets.UTF_8))))
        .leftMap(t => t.getMessage)
    }

  // #####End ByteBuffer#####

  // TODO: improve UnknownUnionField encoding/decoding
  // ######Apache Structs######

  private implicit def encodeTFieldBlob: Encoder[TFieldBlob] =
    Encoder.instance(_ => Vector(Array.empty[Byte]).asJson)

  // ####End Apache Structs####

  // ##########Unions##########

  // ########End Unions########

  // ###########Enums###########

  // Implicits for ImportedEnum

  implicit def decode___com_imported___ImportedEnum: Decoder[com.imported.ImportedEnum] =
    Decoder.decodeString.emap { str =>
      Either.catchNonFatal(com.imported.ImportedEnum.valueOf(str).get).leftMap(t => t.getMessage)
    }

  implicit def encode___com_imported___ImportedEnum: Encoder[com.imported.ImportedEnum] =
    Encoder.encodeString.contramap[com.imported.ImportedEnum](_.originalName)

  // #########End Enums#########

  // ##########Structs##########

  // Implicits for ImportedStructDependency

  implicit def decode___com_imported___ImportedStructDependency: Decoder[com.imported.ImportedStructDependency] =
    Decoder.forProduct1(
    "dependencyId",
    )(com.imported.ImportedStructDependency.apply)

  implicit def encode___com_imported___ImportedStructDependency: Encoder[com.imported.ImportedStructDependency] =
    Encoder.forProduct1(
    "dependencyId",
    )(importedstructdependency =>
      (
      importedstructdependency.dependencyId,
      )
  )

  // Implicits for ImportedStruct

  implicit def decode___com_imported___ImportedStruct: Decoder[com.imported.ImportedStruct] =
    Decoder.forProduct2(
    "legacyId",
    "serial",
    )(com.imported.ImportedStruct.apply)

  implicit def encode___com_imported___ImportedStruct: Encoder[com.imported.ImportedStruct] =
    Encoder.forProduct2(
    "legacyId",
    "serial",
    )(importedstruct =>
      (
      importedstruct.legacyId,
      importedstruct.serial,
      )
  )

  // Implicits for ImportedException

  implicit def decode___com_imported___ImportedException: Decoder[com.imported.ImportedException] =
    Decoder.forProduct1(
    "message",
    )(com.imported.ImportedException.apply)

  implicit def encode___com_imported___ImportedException: Encoder[com.imported.ImportedException] =
    Encoder.forProduct1(
    "message",
    )(importedexception =>
      (
      importedexception.message,
      )
  )

  // ########End Structs########

  // #######NoArg Structs#######

  // #####End NoArg Structs#####
}
