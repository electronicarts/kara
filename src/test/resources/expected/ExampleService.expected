/*
 * Copyright (C) 2022 Electronic Arts Inc.  All rights reserved.
 */

// This file is autogenerated by kara. Do not edit.

package com.ea.kara.generated.test

// ThriftStruct <-> JSON conversions
import com.ea.kara.generated.test._
import com.ea.kara.generated.imported_test._
// One-arg functions

private case class OneParamRequest__exampleMethod1(
  request: com.example.ExampleRequest
  )

private object OneParamRequest__exampleMethod1 {
  implicit def decode___oneParamRequest___exampleMethod1: _root_.io.circe.Decoder[com.ea.kara.generated.test.OneParamRequest__exampleMethod1] =
    _root_.io.circe.Decoder.forProduct1(
    "request"
    )(com.ea.kara.generated.test.OneParamRequest__exampleMethod1.apply)
}
// Multi-arg functions

private case class MultiParamRequest__multiArgMethod(
  one: com.example.ExampleField,
  two: com.example.ExampleEnum,
  )

private object MultiParamRequest__multiArgMethod {
  implicit def decode___multiParamRequest___multiArgMethod: _root_.io.circe.Decoder[com.ea.kara.generated.test.MultiParamRequest__multiArgMethod] =
    _root_.io.circe.Decoder.forProduct2(
    "one",
    "two",
    )(com.ea.kara.generated.test.MultiParamRequest__multiArgMethod.apply)
}
// Error handling

private object HttpExampleService {
  private case class GenericError(message: String)

  private val encode__genericError: _root_.io.circe.Encoder[com.ea.kara.generated.test.HttpExampleService.GenericError] = 
      error => _root_.io.circe.Json.fromFields(Seq("message" -> _root_.io.circe.Json.fromString(error.message)))
}

class HttpExampleService(
  thriftService: com.example.ExampleService.MethodPerEndpoint
) extends _root_.com.twitter.finagle.Service[_root_.com.twitter.finagle.http.Request, _root_.com.twitter.finagle.http.Response] {

  // Don't make it implicit to make sure it's not picked up accidentally when a more specific encoder is available
  private val defaultThrowableEncoder: _root_.io.circe.Encoder[Throwable] = {
    _root_.io.circe.Encoder.forProduct1("message")(_.getMessage)
  }

  implicit private val codec: _root_.scala.io.Codec = new _root_.scala.io.Codec(_root_.java.nio.charset.StandardCharsets.UTF_8)

  private def using[A, B <: _root_.java.io.Closeable](closeable: => B)(f: B => A)(c: PartialFunction[Throwable, A]): A = {
    try {
      f(closeable)
    } catch {
      c
    } finally {
      closeable.close()
    }
  }

  private def jsonResponse[T](
    obj: T, 
    status: _root_.com.twitter.finagle.http.Status
  )(implicit encoder: _root_.io.circe.Encoder[T]): _root_.com.twitter.util.Future[_root_.com.twitter.finagle.http.Response] = {
    // Map obj to JSON body
    val jsonBody = encoder(obj).spaces2

    // Build the response
    val response = _root_.com.twitter.finagle.http.Response(status)
    response.setContentString(jsonBody)
    response.setContentTypeJson()
    com.twitter.util.Future.value(response)
  }

  def apply(request: _root_.com.twitter.finagle.http.Request): _root_.com.twitter.util.Future[_root_.com.twitter.finagle.http.Response] = {
    request.method match {
      case _root_.com.twitter.finagle.http.Method.Get =>
        val resource = request.path.split("/").lastOption.getOrElse("index.html")
        val resourcePath = resource match {
            case "service.oas" =>
              s"swagger/com.example.ExampleService/service.oas"
            case otherResource =>
              s"swagger/$otherResource"
        }
        using(_root_.scala.io.Source.fromResource(resourcePath)) { bufferedContent =>
          val response = _root_.com.twitter.finagle.http.Response()
          val contentString = bufferedContent.mkString
          response.contentString = contentString
          _root_.com.twitter.util.Future.value(response)
        } {
          case _root_.scala.util.control.NonFatal(ex) =>
            jsonResponse(
              obj = com.ea.kara.generated.test.HttpExampleService.GenericError(s"An error occurred serving static content for request $request: ${ex.getMessage}."), 
              status = com.twitter.finagle.http.Status.InternalServerError)(com.ea.kara.generated.test.HttpExampleService.encode__genericError
            )
        }

      case _root_.com.twitter.finagle.http.Method.Post =>
        request.uri match {
          case "/noArgMethod" =>
            // No arg, no JSON body to decode
            thriftService.noArgMethod().flatMap { thriftResponse =>
              jsonResponse(
                obj = thriftResponse, 
                status = _root_.com.twitter.finagle.http.Status.Ok
              )
            }.rescue {
              case t =>
                jsonResponse(
                  obj = t, 
                  status = _root_.com.twitter.finagle.http.Status.InternalServerError
                )(defaultThrowableEncoder)
            }
          case "/exampleMethod1" =>
            // Map JSON body to Thrift request
            // Attempt to deserialize the request as the unwrapped single parameter first
            _root_.io.circe.parser.decode[com.example.ExampleRequest](request.contentString) match {
              case Right(thriftRequest) =>
                thriftService.exampleMethod1(thriftRequest).flatMap { thriftResponse =>
                  jsonResponse(
                    obj = thriftResponse, 
                    status = _root_.com.twitter.finagle.http.Status.Ok
                  )
                }.rescue {
                    case error: com.example.ExampleException =>
                      jsonResponse(
                        obj = error, 
                        status = _root_.com.twitter.finagle.http.Status.InternalServerError
                      )
                    case importedError: com.imported.ImportedException =>
                      jsonResponse(
                        obj = importedError, 
                        status = _root_.com.twitter.finagle.http.Status.InternalServerError
                      )
                    case otherError: com.example.OtherExampleException =>
                      jsonResponse(
                        obj = otherError, 
                        status = _root_.com.twitter.finagle.http.Status.InternalServerError
                      )
                    case t =>
                      jsonResponse(
                        obj = t, 
                        status = _root_.com.twitter.finagle.http.Status.InternalServerError
                      )(defaultThrowableEncoder)
                }
              case Left(error) => {
                // If deserialization fails, attempt to deserialize
                // the single param wrapped in a parent object
                _root_.io.circe.parser.decode[com.ea.kara.generated.test.OneParamRequest__exampleMethod1](request.contentString) match {
                  case Right(wrappedThriftRequest: com.ea.kara.generated.test.OneParamRequest__exampleMethod1) =>
                    thriftService.exampleMethod1(wrappedThriftRequest.request).flatMap { thriftResponse =>
                      jsonResponse(
                        obj = thriftResponse, 
                        status = _root_.com.twitter.finagle.http.Status.Ok
                      )
                    }.rescue {
                        case error: com.example.ExampleException =>
                          jsonResponse(
                            obj = error, 
                            status = _root_.com.twitter.finagle.http.Status.InternalServerError
                          )
                        case importedError: com.imported.ImportedException =>
                          jsonResponse(
                            obj = importedError, 
                            status = _root_.com.twitter.finagle.http.Status.InternalServerError
                          )
                        case otherError: com.example.OtherExampleException =>
                          jsonResponse(
                            obj = otherError, 
                            status = _root_.com.twitter.finagle.http.Status.InternalServerError
                          )
                        case t =>
                          jsonResponse(
                            obj = t, 
                            status = _root_.com.twitter.finagle.http.Status.InternalServerError
                          )(defaultThrowableEncoder)
                    }
                  case Left(error) =>
                    jsonResponse(
                      obj = error: Throwable, 
                      status = _root_.com.twitter.finagle.http.Status.InternalServerError
                    )(defaultThrowableEncoder)
                }
              }
            }
          case "/multiArgMethod" => {
            // Map JSON body to Thrift request
            _root_.io.circe.parser.decode[com.ea.kara.generated.test.MultiParamRequest__multiArgMethod](request.contentString) match {
              case Right(thriftRequestParams: com.ea.kara.generated.test.MultiParamRequest__multiArgMethod) =>
                // Deconstruct MultiParamRequest__multiArgMethod into different Thrift params
                thriftService.multiArgMethod(
                  thriftRequestParams.one,
                  thriftRequestParams.two,
                  ).flatMap { thriftResponse =>
                  jsonResponse(
                    obj = thriftResponse, 
                    status = _root_.com.twitter.finagle.http.Status.Ok
                  )
                }.rescue {
                    case t =>
                      jsonResponse(
                        obj = t, 
                        status = _root_.com.twitter.finagle.http.Status.InternalServerError
                      )(defaultThrowableEncoder)
                }
              case Left(error) =>
                jsonResponse(
                  obj = error: Throwable, 
                  status = _root_.com.twitter.finagle.http.Status.InternalServerError
                )(defaultThrowableEncoder)
            }
          }
          case otherUri =>
            jsonResponse(
              obj = com.ea.kara.generated.test.HttpExampleService.GenericError(s"URI $otherUri is unsupported."), 
              status = _root_.com.twitter.finagle.http.Status.NotFound)(com.ea.kara.generated.test.HttpExampleService.encode__genericError
            )
        }
      case otherMethod =>
        jsonResponse(
          obj = com.ea.kara.generated.test.HttpExampleService.GenericError(s"Method $otherMethod is unsupported."), 
          status = _root_.com.twitter.finagle.http.Status.NotFound)(com.ea.kara.generated.test.HttpExampleService.encode__genericError
        )
    }
  }
}
