/*
 * Copyright (C) 2021 Electronic Arts Inc.  All rights reserved.
 */

// This file is autogenerated by kara. Do not edit.

package {{package}}

// ThriftStruct <-> JSON conversions
{{#filePackages}}
import {{.}}._
{{/filePackages}}

// One-arg functions

{{#oneArgFunctions}}
private case class OneParamRequest__{{name}}(
  {{#arg}}
  {{name}}: {{type}}
  {{/arg}}
)

private object OneParamRequest__{{name}} {
  implicit def decode___oneParamRequest___{{name}}: _root_.io.circe.Decoder[{{package}}.OneParamRequest__{{name}}] =
    _root_.io.circe.Decoder.forProduct1(
    {{#arg}}
      "{{name}}"
    {{/arg}}
    )({{package}}.OneParamRequest__{{name}}.apply)
}
{{/oneArgFunctions}}

// Multi-arg functions

{{#multiArgFunctions}}
private case class MultiParamRequest__{{name}}(
  {{#args}}
  {{name}}: {{type}},
  {{/args}}
)

private object MultiParamRequest__{{name}} {
  implicit def decode___multiParamRequest___{{name}}: _root_.io.circe.Decoder[{{package}}.MultiParamRequest__{{name}}] =
    _root_.io.circe.Decoder.forProduct{{numberOfFields}}(
    {{#args}}
      "{{name}}",
    {{/args}}
    )({{package}}.MultiParamRequest__{{name}}.apply)
}
{{/multiArgFunctions}}

// Error handling

private object {{httpServiceName}} {
  private case class GenericError(message: String)

  private val encode__genericError: _root_.io.circe.Encoder[{{package}}.{{httpServiceName}}.GenericError] = 
      error => _root_.io.circe.Json.fromFields(Seq("message" -> _root_.io.circe.Json.fromString(error.message)))
}

class {{httpServiceName}}(
  thriftService: {{thriftNamespace}}.{{thriftServiceName}}.MethodPerEndpoint
) extends _root_.com.twitter.finagle.Service[_root_.com.twitter.finagle.http.Request, _root_.com.twitter.finagle.http.Response] {

  // Don't make it implicit to make sure it's not picked up accidentally when a more specific encoder is available
  private val defaultThrowableEncoder: _root_.io.circe.Encoder[Throwable] = {
    _root_.io.circe.Encoder.forProduct1("message")(_.getMessage)
  }

  implicit private val codec: _root_.scala.io.Codec = new _root_.scala.io.Codec(_root_.java.nio.charset.StandardCharsets.UTF_8)

  private def using[A, B <: _root_.java.io.Closeable](closeable: => B)(f: B => A)(c: PartialFunction[Throwable, A]): A = {
    try {
      f(closeable)
    } catch {
      c
    } finally {
      closeable.close()
    }
  }

  private def jsonResponse[T](
    obj: T, 
    status: _root_.com.twitter.finagle.http.Status
  )(implicit encoder: _root_.io.circe.Encoder[T]): _root_.com.twitter.util.Future[_root_.com.twitter.finagle.http.Response] = {
    // Map obj to JSON body
    val jsonBody = encoder(obj).pretty(_root_.io.circe.Printer.spaces2)

    // Build the response
    val response = _root_.com.twitter.finagle.http.Response(status)
    response.setContentString(jsonBody)
    response.setContentTypeJson()
    com.twitter.util.Future.value(response)
  }

  def apply(request: _root_.com.twitter.finagle.http.Request): _root_.com.twitter.util.Future[_root_.com.twitter.finagle.http.Response] = {
    request.method match {
      case _root_.com.twitter.finagle.http.Method.Get =>
        val resource = request.path.split("/").lastOption.getOrElse("index.html")
        val resourcePath = resource match {
            case "service.oas" =>
              s"swagger/{{thriftNamespace}}.{{thriftServiceName}}/service.oas"
            case otherResource =>
              s"swagger/$otherResource"
        }
        using(_root_.scala.io.Source.fromResource(resourcePath)) { bufferedContent =>
          val response = _root_.com.twitter.finagle.http.Response()
          val contentString = bufferedContent.mkString
          response.contentString = contentString
          _root_.com.twitter.util.Future.value(response)
        } {
          case _root_.scala.util.control.NonFatal(ex) =>
            jsonResponse(
              obj = {{package}}.{{httpServiceName}}.GenericError(s"An error occurred serving static content for request $request: ${ex.getMessage}."), 
              status = com.twitter.finagle.http.Status.InternalServerError)({{package}}.{{httpServiceName}}.encode__genericError
            )
        }

      case _root_.com.twitter.finagle.http.Method.Post =>
        request.uri match {
          {{#zeroArgFunctions}}
          case "/{{name}}" =>
            // No arg, no JSON body to decode
            thriftService.{{name}}().flatMap { thriftResponse =>
              jsonResponse(
                obj = thriftResponse, 
                status = _root_.com.twitter.finagle.http.Status.Ok
              )
            }.rescue {
              {{#exceptions}}
              case {{name}}: {{type}} =>
                jsonResponse({{name}}, _root_.com.twitter.finagle.http.Status.InternalServerError)
              {{/exceptions}}
              case t =>
                jsonResponse(
                  obj = t, 
                  status = _root_.com.twitter.finagle.http.Status.InternalServerError
                )(defaultThrowableEncoder)
            }
          {{/zeroArgFunctions}}
          {{#oneArgFunctions}}
          case "/{{name}}" =>
            // Map JSON body to Thrift request
            // Attempt to deserialize the request as the unwrapped single parameter first
            {{#arg}}_root_.io.circe.parser.decode[{{type}}]{{/arg}}(request.contentString) match {
              case Right(thriftRequest) =>
                thriftService.{{name}}(thriftRequest).flatMap { thriftResponse =>
                  jsonResponse(
                    obj = thriftResponse, 
                    status = _root_.com.twitter.finagle.http.Status.Ok
                  )
                }.rescue {
                    {{#exceptions}}
                    case {{name}}: {{type}} =>
                      jsonResponse(
                        obj = {{name}}, 
                        status = _root_.com.twitter.finagle.http.Status.InternalServerError
                      )
                    {{/exceptions}}
                    case t =>
                      jsonResponse(
                        obj = t, 
                        status = _root_.com.twitter.finagle.http.Status.InternalServerError
                      )(defaultThrowableEncoder)
                }
              case Left(error) => {
                // If deserialization fails, attempt to deserialize
                // the single param wrapped in a parent object
                _root_.io.circe.parser.decode[{{package}}.OneParamRequest__{{name}}](request.contentString) match {
                  case Right(wrappedThriftRequest: {{package}}.OneParamRequest__{{name}}) =>
                    thriftService.{{name}}{{#arg}}(wrappedThriftRequest.{{name}}){{/arg}}.flatMap { thriftResponse =>
                      jsonResponse(
                        obj = thriftResponse, 
                        status = _root_.com.twitter.finagle.http.Status.Ok
                      )
                    }.rescue {
                        {{#exceptions}}
                        case {{name}}: {{type}} =>
                          jsonResponse(
                            obj = {{name}}, 
                            status = _root_.com.twitter.finagle.http.Status.InternalServerError
                          )
                        {{/exceptions}}
                        case t =>
                          jsonResponse(
                            obj = t, 
                            status = _root_.com.twitter.finagle.http.Status.InternalServerError
                          )(defaultThrowableEncoder)
                    }
                  case Left(error) =>
                    jsonResponse(
                      obj = error: Throwable, 
                      status = _root_.com.twitter.finagle.http.Status.InternalServerError
                    )(defaultThrowableEncoder)
                }
              }
            }
          {{/oneArgFunctions}}
          {{#multiArgFunctions}}
          case "/{{name}}" => {
            // Map JSON body to Thrift request
            _root_.io.circe.parser.decode[{{package}}.MultiParamRequest__{{name}}](request.contentString) match {
              case Right(thriftRequestParams: {{package}}.MultiParamRequest__{{name}}) =>
                // Deconstruct MultiParamRequest__{{name}} into different Thrift params
                thriftService.{{name}}(
                  {{#args}}
                  thriftRequestParams.{{name}},
                  {{/args}}
                ).flatMap { thriftResponse =>
                  jsonResponse(
                    obj = thriftResponse, 
                    status = _root_.com.twitter.finagle.http.Status.Ok
                  )
                }.rescue {
                    {{#exceptions}}
                    case {{name}}: {{type}} =>
                      jsonResponse(
                        obj = {{name}}, 
                        status = _root_.com.twitter.finagle.http.Status.InternalServerError
                      )
                    {{/exceptions}}
                    case t =>
                      jsonResponse(
                        obj = t, 
                        status = _root_.com.twitter.finagle.http.Status.InternalServerError
                      )(defaultThrowableEncoder)
                }
              case Left(error) =>
                jsonResponse(
                  obj = error: Throwable, 
                  status = _root_.com.twitter.finagle.http.Status.InternalServerError
                )(defaultThrowableEncoder)
            }
          }
          {{/multiArgFunctions}}
          case otherUri =>
            jsonResponse(
              obj = {{package}}.{{httpServiceName}}.GenericError(s"URI $otherUri is unsupported."), 
              status = _root_.com.twitter.finagle.http.Status.NotFound)({{package}}.{{httpServiceName}}.encode__genericError
            )
        }
      case otherMethod =>
        jsonResponse(
          obj = {{package}}.{{httpServiceName}}.GenericError(s"Method $otherMethod is unsupported."), 
          status = _root_.com.twitter.finagle.http.Status.NotFound)({{package}}.{{httpServiceName}}.encode__genericError
        )
    }
  }
}
