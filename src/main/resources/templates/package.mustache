/*
 * Copyright (C) 2021 Electronic Arts Inc.  All rights reserved.
 */

// This file is autogenerated by kara. Do not edit.

package {{package}}

// TODO: These wildcard imports are a source of trouble: get rid of them.

// Java
import java.nio.ByteBuffer
import java.nio.charset.StandardCharsets
import java.util.Base64

// Cats
import cats.syntax.either._

// Circe
import io.circe._, io.circe.parser._, io.circe.generic.auto._, io.circe.syntax._

// Scrooge
import com.twitter.scrooge._

// Apache Thrift
import org.apache.thrift.protocol._

// ThriftStruct <-> JSON conversions
{{#filePackages}}
import {{.}}._
{{/filePackages}}

package object {{normalizedThriftFileName}} {
  // #######ByteBuffer#######

  private implicit def encodeByteBuffer: Encoder[ByteBuffer] =
    Encoder.instance(buffer => new String(Base64.getEncoder.encode(buffer).array(), StandardCharsets.UTF_8).asJson)

  private implicit def decodeByteBuffer: Decoder[ByteBuffer] =
    Decoder.decodeString.emap { str =>
      Either.catchNonFatal(ByteBuffer.wrap(Base64.getDecoder.decode(str.getBytes(StandardCharsets.UTF_8))))
        .leftMap(t => t.getMessage)
    }

  // #####End ByteBuffer#####

  // TODO: improve UnknownUnionField encoding/decoding
  // ######Apache Structs######

  private implicit def encodeTFieldBlob: Encoder[TFieldBlob] =
    Encoder.instance(_ => Vector(Array.empty[Byte]).asJson)

  // ####End Apache Structs####

  // ##########Unions##########

  {{#unions}}
  // Implicits for {{type}}

  implicit def decode___{{underscoredThriftNamespace}}___{{type}}: Decoder[{{thriftNamespace}}.{{type}}] =
    Decoder.instance(union =>
      Seq[Either[DecodingFailure, {{thriftNamespace}}.{{type}}]](
      {{#fields}}
        union.as[{{thriftNamespace}}.{{type}}.{{capitalizedName}}],
      {{/fields}}
      ).collectFirst {
        case decoded: Right[DecodingFailure, {{thriftNamespace}}.{{type}}] => decoded
      }.getOrElse {
        Right({{thriftNamespace}}.{{type}}.UnknownUnionField(TFieldBlob(new TField(), Array.emptyByteArray)))
      }
    )

  implicit def encode___{{underscoredThriftNamespace}}___{{type}}: Encoder[{{thriftNamespace}}.{{type}}] =
    Encoder.instance(union =>
      union match {
      {{#fields}}
        case value: {{thriftNamespace}}.{{type}}.{{capitalizedName}} => value.asJson
      {{/fields}}
        case value: {{thriftNamespace}}.{{type}}.UnknownUnionField => Json.fromString("UnknownUnionField")
      }
    )

  {{/unions}}
  // ########End Unions########

  // ###########Enums###########

  {{#enums}}
  // Implicits for {{name}}

  implicit def decode___{{underscoredThriftNamespace}}___{{name}}: Decoder[{{thriftNamespace}}.{{name}}] =
    Decoder.decodeString.emap { str =>
      Either.catchNonFatal({{thriftNamespace}}.{{name}}.valueOf(str).get).leftMap(t => t.getMessage)
    }

  implicit def encode___{{underscoredThriftNamespace}}___{{name}}: Encoder[{{thriftNamespace}}.{{name}}] =
    Encoder.encodeString.contramap[{{thriftNamespace}}.{{name}}](_.originalName)

  {{/enums}}
  // #########End Enums#########

  // ##########Structs##########

  {{#structs}}
  // Implicits for {{type}}

  implicit def decode___{{underscoredThriftNamespace}}___{{type}}: Decoder[{{thriftNamespace}}.{{type}}] =
    Decoder.forProduct{{numberOfFields}}(
    {{#fields}}
      "{{name}}",
    {{/fields}}
    )({{thriftNamespace}}.{{type}}.apply)

  implicit def encode___{{underscoredThriftNamespace}}___{{type}}: Encoder[{{thriftNamespace}}.{{type}}] =
    Encoder.forProduct{{numberOfFields}}(
    {{#fields}}
      "{{name}}",
    {{/fields}}
    )({{lowerCasedType}} =>
      (
      {{#fields}}
        {{lowerCasedType}}.{{escapedName}},
      {{/fields}}
      )
  )

  {{/structs}}
  // ########End Structs########

  // #######NoArg Structs#######

  {{#noArgs}}
  implicit def decode___{{underscoredThriftNamespace}}___{{type}}: Decoder[{{thriftNamespace}}.{{type}}] = {
    Decoder.const({{thriftNamespace}}.{{type}}())
  }

  implicit def encode___{{underscoredThriftNamespace}}___{{type}}: Encoder[{{thriftNamespace}}.{{type}}] =
    Encoder.instance(_ => Json.obj())

  {{/noArgs}}
  // #####End NoArg Structs#####
}
